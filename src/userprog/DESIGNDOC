Exit code:
    if is user process, print.

Argument passing:
    implement in process_execute() and start_process();
    1.tokenizing input string.
    2.push the address into stack.
    3.do the alignment.
    4.push zero and the address of argument.
    5.push number of argument.
    6.push zero.

System call:
    implement in syscall.c,thread.h,thread.c,process.c
    1.halt:
        call shutdown function
    2.exit:
        get exit code in stack;
    3.wait:

    4.exec:

    5.create:
        get file point,size from stack;
        call filesys function.
    6.remove:
        get file name from stack;
        call filesys function.
    7.read/write:
        get fd,buffer and size from stack;
        convert fd to file pointer;
        call file read/write.
    8.open:
        get file name from stack;
        call file_open;
        add file to thread's file list and generate a fd.
    9.close:
        get fd from stack;
        check own file list,search fd.
        call file_close and remove from the list.
    10.filezize:
        get fd from stack;
        convert fd to fp;
        call file_size;
    11.seek:
        get fd and position from stack;
        convert fd to fp;
        call file_seek;
    12.tell:
        get fd from stack;
        convert fd to fp;
        call file_tell;



		     +--------------------------+
		     |            OS            |
		     | PROJECT 2: USER PROGRAMS |
		     |     DESIGN DOCUMENT      |
		     +--------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Pengqiu Li <leepengqiu@gmail.com> 2575746
Yu Xiao <s8xiyuuu@stud.uni-saarland.de> 2576690

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
we consult from https://github.com/Waqee/Pintos-Project-2 solving waiting and exec.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----
no
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Fisrt step is to tokenize the commands and push the name of process and all the arguments into stack.Then we do alignment so stack%4 == 0 and pad a zero. 
Then we put the address of arg in reverse order. Finall we put the number of argument and return 0.
We don't do special operation to avoid overflowing when push the argument because kernel handle it in page fault in exception. When we access system call, we will check if the address is valid.
---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
I guess the reason is that we need to keep save_ptr so we can visit the address of arguments.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1. load executable file before pushing arguments into stack, no need to roll back if load fail.
2. It will be more safe and flexible if you run you program in shell.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
add element in 
struct thread{
    int record;                         //exit code
    struct thread* parent;              //parent thread
    struct list childs;                 //all child thread
    struct list files;                  //file list
    int increase_file_id_generate;      //generate unique id for file
    bool success;                       //load success or not
    struct file *self;                  //executable file                           
    struct semaphore child_lock;        //sync in load
    struct self_info * self_;           //child pointer
}

//add file to thread files list
struct file_search{
  struct file* fp;                      //file point
  int fd;                               //file descriptors
  struct list_elem elem;
};

//add information of created thread to child list of parent thread
struct self_info{
    tid_t tid;                          //check wait tid
    int record;                         //return code
    struct list_elem elem;                  
    struct semaphore sema;              //synch in wait
    bool waited;                        //make sure only wait once
};

struct lock file_sema;                  //synch file operation

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
fd is only unique within a single process, and is contained in the file list of a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
        1.check if the address in stack is valid, if no, f->eax = -1;
        2.get fd,buffer and size from stack;
        3.convert fd to file pointer; we can check the file list in current thread, and use the fd to get the file pointer.
        4.call file read/write.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
Same for full page and 2 bytes:
least number should be 1 because it is enough to access the head of the page.
great number may be 2? to check the if head and end are valid adressI guess because the memory is continued?


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
we create a child list in parent's thread struct.The child will be add into the list when it is created.
in process_wait, parent thread get the tid of the child who need to be wait. So, parent thread will check into its own child list to see if this tid is inside or not.
If not, return -1, if yes, check if this child has been waited or not because it can only be waited once.If has been waited, return -1.
else parent thread sema_down(child->sema),and when child finish execute and exit, it will sema_up(child->sema) to wake up the parent thread. After parent wake up, it return the 
exit code of child thread and remove the child from the list.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
At the beginning of implementation of syscall, check of pointer validity is necessary. If it is a null pointer, or it cannot map successfully to the page directory of current thread, then it is an invalid pointer. 
Concerning to freeing allocation issues, the strategy we apply is quite staight forward. Any time after you allocate some temporary resources, by the time you do not need it, then free it immediately. And we implemente freeing file resources in SYS_EXIT.


---- SYNCHRONIZATION ----created thread

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
Using load function. And store the return value of it. Use $eax to store the new thread id which would execute the file, or TID_ERROR if it fails.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
Parent process contains a child_list.
if P calls wait(C) before C exits:
    since C in child_list of P, P waits C and returns its exit status 
if P calls wait(C) after C exits:
    C is not in child_list, P directly returns its exit status
When child exits, SYS_EXIT is called, and resources are freed.    
if P terminates without waiting:
    C has no longer parent P, then it will not call V() operation on parent process.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
Before we use the address, we use check_address to validate the address. check if this is user addr and see if we can access the address in own pagedir.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantages is that fd help to access and find the file and manipulate the file.
Disadvantages is that it cost overhead in space.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
no change.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?