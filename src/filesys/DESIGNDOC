		     +-------------------------+
		     |            OS           |
		     | PROJECT 4: FILE SYSTEMS |
		     |     DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct inode_disk{                                   //one inode on disk
    block_sector_t direct_blocks[DIRECT_BLOCK_COUNT];//address to 123 direct blocks in one inode
    block_sector_t indirect_block;                   //address to 1 indirect block in one inode
    block_sector_t doubly_indirect_block;            //address to 1 doubly indirect block, which accounts for 8MB

    bool in_dir;                                     //if in dir
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
};

struct inode_indirect_block{                         //one indirect block, containing 128 pointers to all direct or all indirect blocks
    block_sector_t blocks[INDIRECT_BLOCK_POINTERS_PER_SECTOR];//the address of data content
};

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
    123 direct blocks: 123 * 512 = 62976 B = 61.5 KB
+   1 indirect block: 1 * 128 * 512 = 65536 B = 64 KB
+   1 doubly indirect block: 1 * 128 * 128 * 512 = 8388608 B = 8192 KB = 8 MB
=   8517120 B = 8317.5 KB = 8.12 MB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
Because we have used filesys_cache_lock in filesys_cache_write(). So
when the file is extended in inode_write_at() using this function,
there is no data race.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
Similar as the last question, we use lock in filesys_cache_read() and
filesys_cache_write(). So when inode functions such as inode_read_at()
or inode_write_at() to read/write data block in inode, those cache
read/write functions will be called and the lock in them will assure no
data race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
Because a process returns the filesys_cache_lock after filesys_cache_read()
and filesys_cache_write(), so other processes have a fair chance to gain
the lock afterwards.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
Yes. Because we just follow the unix FFS's inode design, excluding the
triply indirect block, because the doubly indirect block provide 8 MB
already. Then 1 indrect block is enough. Finally the direct block number:
because there's a unused array in struct inode_disk, so we thought why
not add those space to direct blocks.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct filesys_cache_entry{             //one cache entry
    bool free;                          //free entry or not
    block_sector_t disk_sector;         //where is the cache
    uint8_t data[BLOCK_SECTOR_SIZE];    //the data content of the cache
    bool dirty;                         //whether to write it back to disk
    bool accessed;                      //second chance in cache evict algorithm
};

struct cache_entry cache[MAX_FILESYS_CACHE_SIZE];//array of 64 caches
struct lock filesys_cache_lock;                  //protect cache operations

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.
In total: 2 pass of the cache array, but can break the loop if find an
available entry early.
First check if there's a free cache entry in cache array, if so return early.
Then find an unaccessed cache entry, which is bound to be found, because
it's either already an unaccessed entry in 1st pass, or all accessed entries
will be marked as unaccessed in 1st pass.

>> C3: Describe your implementation of write-behind.
In syscall halt, shutdown_power_off() will be called, in which filesys_done()
will be called, in which filesys_cache_close() will be called, which is a
function to write back to disk the dirty caches.

>> C4: Describe your implementation of read-ahead.


---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?
When a process reads/writes, it holds the lock during the read/write
operations in filesys_cache_read() and filesys_cache_write(). It means
other process without the lock can't proceed with eviction.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?
When a process runs the evicting algorithm, it means this process is
currently holding the filesys_cache_lock, which also means other processes
are not holding the lock.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.
Buffer caching: many(within the amounts of cache entries) cached content
are to be read/written again and again.

Read-ahead: large amounts of sequential read, so CPU doesn't have to wait
every time before it reads the data from disk.

Write-behind: dirty caches are written again and again, so multiple
write-back-to-disk operations can be saved using only one write back.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?